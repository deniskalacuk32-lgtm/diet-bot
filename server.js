import 'dotenv/config';
import express from 'express';
import axios from 'axios';
import FormData from 'form-data';
import Database from 'better-sqlite3';

const app = express();
app.use(express.json({ limit: '25mb' }));

/* ---------- –ë–ê–ó–ê (–ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---------- */
const db = new Database('./bot.db');
db.pragma('journal_mode = WAL');
db.exec(`
CREATE TABLE IF NOT EXISTS users(
  user_id TEXT PRIMARY KEY,
  is_paid INTEGER DEFAULT 0,
  free_left INTEGER DEFAULT 10,
  paid_until TEXT,
  profile_json TEXT,
  summary TEXT,
  created_at TEXT DEFAULT (datetime('now'))
);
CREATE TABLE IF NOT EXISTS messages(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id TEXT,
  dt TEXT DEFAULT (datetime('now')),
  role TEXT,
  text TEXT
);
CREATE TABLE IF NOT EXISTS meals(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id TEXT,
  dt TEXT DEFAULT (datetime('now')),
  source TEXT,
  item_json TEXT,
  kcal INTEGER,
  b REAL, j REAL, u REAL
);
`);

const getUser = (id) => {
  let u = db.prepare('SELECT * FROM users WHERE user_id=?').get(id);
  if (!u) {
    db.prepare('INSERT INTO users(user_id) VALUES(?)').run(id);
    u = db.prepare('SELECT * FROM users WHERE user_id=?').get(id);
  }
  return u;
};
const setProfile = (id, p) =>
  db.prepare('UPDATE users SET profile_json=? WHERE user_id=?').run(JSON.stringify(p), id);
const setPaid = (id) =>
  db.prepare('UPDATE users SET is_paid=1, free_left=99999 WHERE user_id=?').run(id);
const decFree = (id) =>
  db.prepare('UPDATE users SET free_left=MAX(free_left-1,0) WHERE user_id=?').run(id);
const saveMsg = (id, role, text) =>
  db.prepare('INSERT INTO messages(user_id, role, text) VALUES(?,?,?)').run(id, role, text);
const lastMsgs = (id, n = 10) =>
  db.prepare('SELECT role, text FROM messages WHERE user_id=? ORDER BY id DESC LIMIT ?')
    .all(id, n)
    .reverse();
const saveMeal = (id, obj) =>
  db.prepare('INSERT INTO meals(user_id, source, item_json, kcal, b, j, u) VALUES(?,?,?,?,?,?,?)')
    .run(id, 'photo', JSON.stringify(obj.raw || {}), obj.kcal || 0, obj.b || 0, obj.j || 0, obj.u || 0);

/* ---------- –õ–û–ì–ò ---------- */
app.use((req, _res, next) => {
  console.log(`[REQ] ${req.method} ${req.path}`);
  next();
});

/* ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—Ä–æ–º–ø—Ç—ã ---------- */
const SYSTEM_PROMPT = `
–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.
–í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å, —Ü–µ–ª—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∞–ª–ª–µ—Ä–≥–∏–∏/–∑–∞–ø—Ä–µ—Ç—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è).
–§–æ—Ç–æ: –æ—Ü–µ–Ω–∏–≤–∞–π –ü–†–ò–ë–õ–ò–ó–ò–¢–ï–õ–¨–ù–£–Æ –º–∞—Å—Å—É, –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£; –¥–∞–π 1‚Äì2 –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞.
–ò–¥–µ–∏ –º–µ–Ω—é: 3‚Äì5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥ —Ü–µ–ª–µ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å ~–∫–∫–∞–ª –∏ –ë/–ñ/–£.
–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî —Ç–∞–∫ –∏ –ø–∏—à–∏. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–∞—Å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Å–ø–∏—Å–∫–∞–º–∏.
`;
const IMAGE_PROMPT = `
–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ –∏ –æ—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –º–∞—Å—Å—É.
–í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):
{
  "items":[{"name":"...", "portion_g":—á–∏—Å–ª–æ, "kcal":—á–∏—Å–ª–æ, "b":—á–∏—Å–ª–æ, "j":—á–∏—Å–ª–æ, "u":—á–∏—Å–ª–æ}],
  "total":{"kcal":—á–∏—Å–ª–æ,"b":—á–∏—Å–ª–æ,"j":—á–∏—Å–ª–æ,"u":—á–∏—Å–ª–æ},
  "advice":"1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º"
}
–ï—Å–ª–∏ –±–ª—é–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –∫–∞–∂–¥—ã–π –≤ items; –µ—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è ‚Äî –æ—Ç–º–µ—Ç—å —ç—Ç–æ –≤ advice.
`;

/* ---------- OpenAI helpers ---------- */
const openaiHeaders = { Authorization: `Bearer ${process.env.OPENAI_API_KEY}` };

async function chatOpenAI(messages, temperature = 0.3) {
  const r = await axios.post(
    'https://api.openai.com/v1/chat/completions',
    { model: 'gpt-4o', temperature, messages },
    { headers: openaiHeaders }
  );
  return r.data.choices[0].message.content.trim();
}

async function visionAnalyze(imageUrlOrData) {
  const r = await axios.post(
    'https://api.openai.com/v1/chat/completions',
    {
      model: 'gpt-4o',
      temperature: 0.1,
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: SYSTEM_PROMPT },
        {
          role: 'user',
          content: [
            { type: 'text', text: IMAGE_PROMPT },
            { type: 'image_url', image_url: { url: imageUrlOrData } }
          ]
        }
      ]
    },
    { headers: openaiHeaders }
  );
  return JSON.parse(r.data.choices[0].message.content);
}

async function whisperTranscribe(audioBuffer) {
  const form = new FormData();
  form.append('file', audioBuffer, { filename: 'audio.ogg' });
  form.append('model', 'whisper-1');
  const r = await axios.post('https://api.openai.com/v1/audio/transcriptions', form, {
    headers: { ...openaiHeaders, ...form.getHeaders() }
  });
  return r.data.text;
}

/* ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---------- */
const PAYWALL =
  '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –∏ —è –ø—Ä–æ–¥–æ–ª–∂—É —Ä–∞–∑–±–æ—Ä—ã, –ø–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ–Ω—é üëá';
const gate = (u) => u.is_paid || u.free_left > 0;

function buildContext(u) {
  const profile = u.profile_json ? JSON.parse(u.profile_json) : {};
  const memory = u.summary || '';
  const msgs = lastMsgs(u.user_id, 10);
  return {
    context: `–ü–†–û–§–ò–õ–¨: ${JSON.stringify(profile)}${memory ? `\n–ö–†–ê–¢–ö–ê–Ø –í–´–ñ–ò–ú–ö–ê: ${memory}` : ''}`,
    msgs
  };
}

async function maybeUpdateSummary(user_id) {
  const cnt = db.prepare('SELECT COUNT(*) c FROM messages WHERE user_id=?').get(user_id).c;
  if (cnt % 15 !== 0) return;
  const history = db
    .prepare('SELECT role, text FROM messages WHERE user_id=? ORDER BY id DESC LIMIT 50')
    .all(user_id);
  const sum = await chatOpenAI(
    [
      { role: 'system', content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –°–æ–∂–º–∏ —Ñ–∞–∫—Ç—ã –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –¥–∏–µ—Ç–æ–ª–æ–≥–∞.' },
      {
        role: 'user',
        content: `–ò—Å—Ç–æ—Ä–∏—è: ${JSON.stringify(
          history
        )}. –î–∞–π 3‚Äì6 —Å—Ç—Ä–æ–∫: —Ü–µ–ª—å, –∑–∞–ø—Ä–µ—Ç—ã/–∞–ª–ª–µ—Ä–≥–∏–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç.`
      }
    ],
    0.2
  );
  db.prepare('UPDATE users SET summary=? WHERE user_id=?').run(sum, user_id);
}

/* ---------- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---------- */
app.get('/', (_req, res) => res.type('text').send('OK /'));
app.get('/health', (_req, res) => res.json({ ok: true, path: '/health' }));
app.get('/healthz', (_req, res) => res.json({ ok: true, path: '/healthz' }));

/* ---------- –ë–∏–∑–Ω–µ—Å-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---------- */
app.post('/update-profile', (req, res) => {
  const { user_id, profile } = req.body || {};
  if (!user_id || !profile) return res.status(400).json({ error: 'bad_request' });
  getUser(user_id);
  setProfile(user_id, profile);
  return res.json({ ok: true });
});

app.post('/diet-chat', async (req, res) => {
  try {
    const { user_id, text } = req.body || {};
    const u = getUser(user_id);
    if (!gate(u)) return res.json({ paywall: true, message: PAYWALL });

    saveMsg(user_id, 'user', text);
    const { context, msgs } = buildContext(u);
    const reply = await chatOpenAI(
      [
        { role: 'system', content: SYSTEM_PROMPT },
        { role: 'user', content: `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n${context}\n\n–í–æ–ø—Ä–æ—Å: ${text}` },
        ...msgs.map((m) => ({ role: m.role, content: m.text }))
      ],
      0.3
    );
    saveMsg(user_id, 'assistant', reply);
    if (!u.is_paid) decFree(user_id);
    await maybeUpdateSummary(user_id);
    res.json({ paywall: false, message: reply });
  } catch {
    res.status(500).json({ error: 'chat_failed' });
  }
});

app.post('/analyze-photo', async (req, res) => {
  try {
    const { user_id, image } = req.body || {};
    const u = getUser(user_id);
    if (!gate(u)) return res.json({ paywall: true, message: PAYWALL });

    const result = await visionAnalyze(image);
    const total = result.total || { kcal: 0, b: 0, j: 0, u: 0 };
    saveMeal(user_id, { kcal: total.kcal, b: total.b, j: total.j, u: total.u, raw: result });

    const text = [
      '–†–∞–∑–±–æ—Ä –±–ª—é–¥–∞(–æ–≤):',
      ...(result.items || []).map(
        (it, i) =>
          `${i + 1}) ${it.name}: ~${it.portion_g || '?'} –≥ ‚Äî ${it.kcal || '?'} –∫–∫–∞–ª (–ë ${
            it.b || '?'
          } / –ñ ${it.j || '?'} / –£ ${it.u || '?'})`
      ),
      `–ò–¢–û–ì–û: ${total.kcal || '?'} –∫–∫–∞–ª (–ë ${total.b || '?'} / –ñ ${total.j || '?'} / –£ ${
        total.u || '?'
      })`,
      `–°–æ–≤–µ—Ç: ${result.advice || '‚Äî'}`
    ].join('\n');

    saveMsg(user_id, 'user', '[–§–æ—Ç–æ –µ–¥—ã]');
    saveMsg(user_id, 'assistant', text);
    if (!u.is_paid) decFree(user_id);
    await maybeUpdateSummary(user_id);
    res.json({ paywall: false, message: text, total });
  } catch {
    res.status(500).json({ error: 'image_failed' });
  }
});

app.post('/analyze-voice', async (req, res) => {
  try {
    const { user_id, audio_base64 } = req.body || {};
    const u = getUser(user_id);
    if (!gate(u)) return res.json({ paywall: true, message: PAYWALL });

    const buf = Buffer.from(audio_base64, 'base64');
    const transcript = await whisperTranscribe(buf);
    saveMsg(user_id, 'user', `[–ì–æ–ª–æ—Å ‚Üí —Ç–µ–∫—Å—Ç]: ${transcript}`);

    const { context, msgs } = buildContext(u);
    const reply = await chatOpenAI(
      [
        { role: 'system', content: SYSTEM_PROMPT },
        { role: 'user', content: `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n${context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç): ${transcript}` },
        ...msgs.map((m) => ({ role: m.role, content: m.text }))
      ],
      0.3
    );

    saveMsg(user_id, 'assistant', reply);
    if (!u.is_paid) decFree(user_id);
    await maybeUpdateSummary(user_id);
    res.json({ paywall: false, message: reply, transcript });
  } catch {
    res.status(500).json({ error: 'voice_failed' });
  }
});

app.post('/suggest-meals', async (req, res) => {
  try {
    const { user_id, type = 'breakfast' } = req.body || {};
    const map = { breakfast: '–∑–∞–≤—Ç—Ä–∞–∫–æ–≤', lunch: '–æ–±–µ–¥–æ–≤', snack: '–ø–µ—Ä–µ–∫—É—Å–æ–≤' };
    const u = getUser(user_id);
    if (!gate(u)) return res.json({ paywall: true, message: PAYWALL });

    const { context, msgs } = buildContext(u);
    const ask = `–î–∞–π 3‚Äì5 –∏–¥–µ–π ${map[type] || '–±–ª—é–¥'} –ø–æ–¥ —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞. –î–ª—è –∫–∞–∂–¥–æ–π: –Ω–∞–∑–≤–∞–Ω–∏–µ, ~–∫–∫–∞–ª, –ë/–ñ/–£, –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ—Ü–µ–ø—Ç.`;
    const reply = await chatOpenAI(
      [
        { role: 'system', content: SYSTEM_PROMPT },
        { role: 'user', content: `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n${context}\n\n${ask}` },
        ...msgs.map((m) => ({ role: m.role, content: m.text }))
      ],
      0.4
    );

    saveMsg(user_id, 'user', `[–ó–∞–ø—Ä–æ—Å –∏–¥–µ–π: ${type}]`);
    saveMsg(user_id, 'assistant', reply);
    if (!u.is_paid) decFree(user_id);
    await maybeUpdateSummary(user_id);
    res.json({ paywall: false, message: reply });
  } catch {
    res.status(500).json({ error: 'suggest_failed' });
  }
});

app.post('/payment-confirm', (req, res) => {
  const { user_id, payment_status } = req.body || {};
  if (payment_status === 'success') {
    setPaid(user_id);
    return res.json({ ok: true });
  }
  res.json({ ok: false });
});

/* ---------- CATCH-ALL 404 ---------- */
app.use((req, res) => {
  res.status(404).type('text').send(`No route for: ${req.method} ${req.path}`);
});

/* ---------- START ---------- */
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`‚úÖ Server running on port ${port}`));






